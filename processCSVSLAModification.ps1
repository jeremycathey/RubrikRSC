######Beginning of rscConnect Function
function rscConnect() {
    [CmdletBinding(DefaultParameterSetName = 'ServiceAccountFile')]
    param (
        [Parameter(ParameterSetName = 'ServiceAccountFile')]
        [String]$ServiceAccountPath,
        [Parameter(ParameterSetName = 'AccessToken')]
        [String]$AccessToken
    )
    <#
    .SYNOPSIS
  
     Connects to an instance of Rubrik Security Cloud using an Access Token or Service Account File
  
    .DESCRIPTION
  
    Connects to an instance of Rubrik Security Cloud using an Access Token or Service Account File
  
    .EXAMPLE
  
    The Service Account JSON can be downloaded from the GUI when creating a service account.
  
    PS> Connect-RubrikSecurityCloud -Path ~/.rubrik/myserviceaccount.json
  
    .EXAMPLE
  
    Connect to your Rubrik Security Cloud instance using access token, generated by an external auth mechanism (Like the Rubrik UI)
  
    PS> Connect-RubrikSecurityCloud -AccessToken "Access Token from Browser session or another vault or script that has authenticated using a Servce Account"
  
    #>
  
    Write-Information -Message "Info: Attempting to read the Service Account file located at $($ServiceAccountPath)"
    try {
        switch ($PSCmdlet.ParameterSetName) {
            'ServiceAccountFile' {
                $serviceAccountFile = Get-Content -Path $ServiceAccountPath -ErrorAction Stop | ConvertFrom-Json
                $payload = @{
                    grant_type = "client_credentials";
                    client_id = $serviceAccountFile.client_id;
                    client_secret = $serviceAccountFile.client_secret
                }   
            
                Write-Debug -Message "Determing if the Service Account file contains all required variables."
                $missingServiceAccount = @()
                if ($null -eq $serviceAccountFile.client_id) {
                    $missingServiceAccount += "'client_id'"
                }
            
                if ($null -eq $serviceAccountFile.client_secret) {
                    $missingServiceAccount += "'client_secret'"
                }
            
                if ($null -eq $serviceAccountFile.access_token_uri) {
                    $missingServiceAccount += "'access_token_uri'"
                }
            
            
                if ($missingServiceAccount.count -gt 0){
                    throw "The Service Account JSON secret file is missing the required paramaters: $missingServiceAccount"
                }
  
                $headers = @{
                    'Content-Type' = 'application/json';
                    'Accept'       = 'application/json';
                }
  
                Write-Debug -Message "Connecting to the Polaris GraphQL API using the Service Account JSON file."
                $response = Invoke-RestMethod -Method POST -Uri $serviceAccountFile.access_token_uri -Body $($payload | ConvertTo-JSON -Depth 100) -Headers $headers
                $AccessToken = "Bearer " + $response.access_token
                $rscURL  = $serviceAccountFile.access_token_uri.Replace("/api/client_token", "/api/graphql")
            }
            'AccessToken' {
                $rscURL = getUrlFromJwt -jwt $AccessToken.split(" ")[1]
            }
            Default {}
        }
        
    }
    catch {      
        throw $_.Exception
    }
    
    Write-Verbose -Message "Creating the Rubrik Polaris Connection Global variable."
    $global:rscConnection = @{
        access_token      = $AccessToken
        rscURL        = $rscURL
    }
    Write-Output "Connected!"
  }
  ######End of rscConnect Function

######Beginning of modifySLAofSnapshot
function modifySLAofSnapshot{
    [CmdletBinding()]
    
    param (
      [Parameter(Mandatory = $true)]
      [string[]]$SnapshotIDs,
      
      [Parameter(Mandatory = $true)]
      [string]$SLAID
    )
    
    foreach ($id in $SnapshotIDs) {
      $variables = @"
      {
        `"userNote`": `"`",
        `"globalSlaAssignType`": `"protectWithSlaId`",
        `"snapshotFids`": [`"$id`"],
        `"globalSlaOptionalFid`": `"$SLAID`"
      }
"@
      $query = @"
      mutation ChangeSnapshotsRetentionMutation(`$globalSlaAssignType: SlaAssignTypeEnum!, `$snapshotFids: [UUID!]!, `$globalSlaOptionalFid: UUID, `$userNote: String) {
        assignRetentionSLAToSnapshots(
          globalSlaAssignType: `$globalSlaAssignType
          snapshotFids: `$snapshotFids
          globalSlaOptionalFid: `$globalSlaOptionalFid
          userNote: `$userNote
        ) {
          success
          __typename
        }
      }
"@
    
            $headers = @{
              'Content-Type' = 'application/json';
              'Accept'       = 'application/json';
              'Authorization' = $rscConnection.access_token
              }
    
            $JSON_BODY = @{
              "variables" = $variables
              "query" = $query
            }
            $JSON_BODY = $JSON_BODY | ConvertTo-Json
            $result = Invoke-WebRequest -Uri $rscConnection.rscURL -Method POST -Headers $headers -Body $JSON_BODY
            $newSLAStatus += ((($result.content | ConvertFrom-Json).data).assignRetentionSLAToSnapshots).success
            Write-Output $newSLAStatus
        }
    
    }
    
    ######End of modifySLAofSnapshot

##############################################ust change path to path of your RSC Service Account JSON File##############################################

#Call rscConnect to get Service Account Contents & Get Access Token
rscConnect -ServiceAccountPath ~/.rubrik/gaia-service-account-file.json

##############################################ust change path to path of your RSC Service Account JSON File##############################################

###############################################################Variable Assignment Required##############################################################

#ID of new SLA to assign to all onDemand snapshots
$slaID = ""

# Define the path to your CSV file
$csvPath = ""

###############################################################Variable Assignment Required##############################################################

# Read the content of the CSV file into an array
$snapshotIds = Import-Csv -Path $csvPath | Select-Object -ExpandProperty SnapshotID

# Modify SLA of each $onDemandInfo entry by passing the $snapshostId into the modifySLAofSnapshost function
modifySLAofSnapshot -SnapshotIDs $snapshotIds -SLAID $slaID
